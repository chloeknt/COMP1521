#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>

//
// Store an arbitray length Binary Coded Decimal number.
// bcd points to an array of size n_bcd
// Each array element contains 1 decimal digit.
// Digits are stored in reverse order.
//
// For example if 42 is stored then
// n_bcd == 2
// bcd[0] == 0x02
// bcd[1] == 0x04
//

typedef struct big_bcd {
    unsigned char *bcd;
    int n_bcd;
} big_bcd_t;


big_bcd_t *bcd_add(big_bcd_t *x, big_bcd_t *y);
void bcd_print(big_bcd_t *number);
void bcd_free(big_bcd_t *number);
big_bcd_t *bcd_from_string(char *string);

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <number> <number>\n", argv[0]);
        exit(1);
    }

    big_bcd_t *left = bcd_from_string(argv[1]);
    big_bcd_t *right = bcd_from_string(argv[2]);

    big_bcd_t *result = bcd_add(left, right);

    bcd_print(result);
    printf("\n");

    bcd_free(left);
    bcd_free(right);
    bcd_free(result);

    return 0;
}


// DO NOT CHANGE THE CODE ABOVE HERE



big_bcd_t *bcd_add(big_bcd_t *x, big_bcd_t *y) {
	//Determine the lengths of the arrays (ignore null terminator)
	//Lengths are currently x->n_bcd and y->n_bcd
	//Pick the longest one 
	int max = 0;
	int min = 0;
	if (x->n_bcd >= y->n_bcd) {
	    max = x->n_bcd;
	    min = y->n_bcd;
	} else {
	    max = y->n_bcd; 
	    min = x->n_bcd;
	}
    //Make two new arrays of max length
    big_bcd_t *number1 = malloc(sizeof *number1);
    number1->n_bcd = max;
    number1->bcd = malloc(max * sizeof number1->bcd[0]);
    
    big_bcd_t *number2 = malloc(sizeof *number2);
    number2->n_bcd = max;
    number2->bcd = malloc(max * sizeof number2->bcd[0]);
    //Fill the array with the shorter number with zeros on the left
    //OLD: 321
    //     032
    //REP: 123
    //     023 
    //If the minimum is string y
    if (min == y->n_bcd) {
        int j = 0;
        for (int i = 0; i < max; i++) { 
            number1->bcd[(max - 1) - i] = x->bcd[i];
            if (i < (max - min)) {
                number2->bcd[i] = 0;
            } else {
                number2->bcd[i] = y->bcd[(min - 1) - j];
                j++;
            }
        }
        //If the minimum is string x 
    } else {
        int j = 0;
        for (int i = 0; i < max; i++) { 
            number1->bcd[(max - 1) - i] = y->bcd[i];
            if (i < (max - min)) {
                number2->bcd[i] = 0;
            } else {
                number2->bcd[i] = x->bcd[(min - 1) - j];
                j++;
            }
        }
    }
    //Debugging
    for (int i = 0; i < max; i++) {
        printf("%d", number1->bcd[i]);
    }
    printf("\n");
    for (int i = 0; i < max; i++) {
        printf("%d", number2->bcd[i]);
    }
    printf("\n");
    //Now we have two strings of the same length
	//Start filling in the values, storing the carry in a temp
	int carry = 0;
	int value = 0;
	//Make a new final array    
	big_bcd_t *final_number = malloc(sizeof *final_number);
    final_number->n_bcd = max;
    final_number->bcd = malloc(max * sizeof final_number->bcd[0]);
	for (int i = max - 1; i >= 0; i--) {
	    value = number1->bcd[i] + number2->bcd[i] + carry;
	    printf("value: %d\n", value);
	    if (value > 9) {
	        carry = value / 10;
	        final_number->bcd[(max - 1) - i] = value % 10;
	    } else {
	        carry = 0;
	        final_number->bcd[(max - 1) - i] = value;
	    }
	    value = 0;
	    printf("carry: %d\n", carry);
	}
    for (int i = 0; i < max; i++) {
        printf("%d", final_number->bcd[i]);
    }
	printf("\n");
	//When the strings are completely computed, realloc for carry over 
	if (carry > 0) {
	    final_number->bcd = realloc(final_number->bcd, (max + 1) * 
	    sizeof(final_number->bcd[0]));
	    final_number->n_bcd++; 
	    /*for (int i = max - 1; i >= 0; i--) {
	        final_number->bcd[i + 1] = final_number->bcd[i];
	    }*/
	    final_number->bcd[max] = carry;
	    //final_number->bcd[1] = 0;
	}
    //Return the array
	return final_number;
}


// DO NOT CHANGE THE CODE BELOW HERE


// print a big_bcd_t number
void bcd_print(big_bcd_t *number) {
    // if you get an error here your bcd_add is returning an invalid big_bcd_t
    assert(number->n_bcd > 0);
    for (int i = number->n_bcd - 1; i >= 0; i--) {
        putchar(number->bcd[i] + '0');
    }
}

// free storage for big_bcd_t number
void bcd_free(big_bcd_t *number) {
    // if you get an error here your bcd_add is returning an invalid big_bcd_t
    // or it is calling free for the numbers it is given
    free(number->bcd);
    free(number);
}

// convert a string to a big_bcd_t number
big_bcd_t *bcd_from_string(char *string) {
    big_bcd_t *number = malloc(sizeof *number);
    assert(number);

    int n_digits = strlen(string);
    assert(n_digits);
    number->n_bcd = n_digits;

    number->bcd = malloc(n_digits * sizeof number->bcd[0]);
    assert(number->bcd);

    for (int i = 0; i < n_digits; i++) {
        int digit = string[n_digits - i - 1];
        assert(isdigit(digit));
        number->bcd[i] = digit - '0';
    }

    return number;
}
