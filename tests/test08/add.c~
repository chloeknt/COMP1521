#include <stdio.h>
#include <stdint.h>
#include <assert.h>

#include "add.h"

// return the MIPS opcode for add $d, $s, $t
uint32_t make_add(uint32_t d, uint32_t s, uint32_t t) {
 //000000ss sssttttt ddddd000 00100000
    int bits[N_BITS] = {0};
    for (int i = 0; i < 6; i++) {
            bits[i] = 0;
    }
    int number = 0;
    for (int i = 5; i > 0; i--) {
        number = s >> (i - 1);
        if (number & 1) {
            bits[11 - i] = 1;
        } else {
            bits[11 - i] = 0;
        }
    }
    for (int i = 5; i > 0; i--) {
        number = t >> (i - 1);
        if (number & 1) {
            bits[16 - i] = 1;
        } else {
            bits[16 - i] = 0;
        }
    }
    for (int i = 5; i > 0; i--) {
        number = d >> (i - 1);
        if (number & 1) {
            bits[21 - i] = 1;
        } else {
            bits[21 - i] = 0;
        }
    }
    for (int i = 11; i > 0; i--) {
        if (i == 6) {
            bits[N_BITS - i] = 1;
        } else {
            bits[N_BITS - i] = 0;
        }
    }
    uint32_t opcode = 0;
    uint32_t mask = 1;
    for (int i = N_BITS - 1; i >= 0; i--) {
        if (bits[i] == 1) {
            opcode = opcode | mask;
        } 
        if (i != 0) {
            mask = mask << 1;
        }
    }
    return opcode;

}
